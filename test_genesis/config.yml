spectaql:
  logoFile: ./logo.png
  faviconFile: ./favicon.ico
  displayAllServers: true
  targetDir: ./docs
  operations:
    - name: Auth Endpoints
      description: Mutations related to authentication
      mutations:
        - name: Sign Up
          mutation: |
            mutation {
              signUp(createUserInput: {
                username: "guest3",
                email: "test5@gmail.com",
                password: "passwordA123*",
                confirm: "passwordA123*",
                }){
                  id
                  role
                  details{
                    username
                    email
                  }
                }
              }
        - name: Sign In
          mutation: |
            mutation {
              signIn(loginInput: {
                username: "testuser",
                password: "passwordA123*"
              }) {
                accessToken
              }
            }
        - name: Sign Out
          mutation: |
            mutation {
              signOut {
                message
              }
            }

    - name: User Endpoints
      description: Queries and mutations related to user
      queries:
        - name: Get All Users
          query: |
            query{
              users{
                id
                role
                books{
                  title
                  description
                  createdAt
                  updatedAt
                }
                details{
                  username
                  email
                  age
                  fullname
                }
              }
            }
        - name: Get User by ID
          query: |
            query{
              user(id:1){
                id
                role
                details{
                  username
                  createdAt
                }
              }
            }
      mutations:
        - name: Update User by ID
          mutation: |
            mutation {
              updateUser(updateUserInput: {
                id: "1",
                username: "updatedUser",
                email: "updateduser@example.com"
              }) {
                id
                username
                email
              }
            }
        - name: Change Password by ID
          mutation: |
            mutation{
              changePassword(input: {
                id: 1
                oldPassword: "passwordA123*"
                newPassword: "passwordA1234*"
              }){
                  message
                  }
            }
        - name: Delete User by ID
          mutation: |
            mutation{
              removeUser(id:2){
                message
              }
            }

    - name: Book Endpoints
      description: Queries and mutations related to book
      queries:
        - name: Get All Books With Paging
          query: |
            query{
              getAllBooksWithPaging(page: 1, limit:5, filters: {
                title: "My  book cool title"  sortBy:"title" sortOrder: "ASC"
                author: "Sara white" }) {
                  edges {
                    node {
                      id
                      title
                      description
                      content
                      status
                      publicationYear
                      authors{
                        details{
                          username
                        }
                      }
                    }
                  cursor
                }
                pageInfo {
                  startCursor
                  endCursor
                  hasNextPage
                  hasPreviousPage
                }
                total
              }
            }
        - name: Get book by ID
          query: |
            query{
              book(id:5){
                id
                title
                description
                content
                status
                genres{
                  name
                }
                authors{
                  details{
                    username
                  }
                }
              }
            }
      mutations:
        - name: createBook
          mutation: |
            mutation{
              createBook(createBookInputDto: {
                title: "My  book cool title 3",
                description: "My  book cool description2",
                content: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
                genres: [1]
                authors: [1]
                }){
                  id
                  title
                  description
                  content
                  status
                  authors {
                    id
                    username
                  }
                }
              }
        - name: updateBook
          mutation: |
            mutation {
              updateBook(id:6, updateBookInputDto: {
                authors: [ 1 ]
                genres: [ 2 ]
                status: PUBLISHED
              }) {
              title
              description
              content
              publicationYear
              status
              }
            }
        - name: deleteBookId
          mutation: |
            mutation{
              removeBook(id:2){
                title
              }
            }
    - name: Genre Endpoints
      description: Queries and mutations related to book
      queries:
        - name: Get All Genres
          query: |
            query{
                genres{
                  id
                  name
                  description
                }
            }
        - name: Get Genre by ID
          query: |
            query{
              genre(id:1){
                id
                name
                description
              }
            }
                  mutations:
      mutations:
        - name: Create Genre
          mutation: |
            mutation{
              createGenre(createGenreInput: {
              name: "Horror",
            }){
              id
              name
              }
            }
        - name: Update Genre
          mutation: |
            mutation{
              updateGenre(id:3, updateGenreInput: {
              name: "Horror Cool"
            }){
              name
              description
              }
            }
        - name: Delete Genre by ID
          mutation: |
            mutation{
              removeGenre(id:3){
                name
              }
            }
    - name: Review Endpoints
      description: Queries and mutations related to review
      queries:
        - name: Get All Reviews With Paging
          query: |
            query {
              reviews(
                limit: 3,
                page: 2,
                offset: 0
              ) {
                reviews {
                  reviewId
                  bookId
                  comment
                  rating
                  createdAt
                }
                totalReviews
              }
            }
        - name: Get Reviews by bookId
          query: |
            query {
              reviewsByBookId(bookId: 1) {
                reviews {
                  reviewId
                  comment
                  bookId
                  userId
                  rating
                  createdAt
                  updatedAt
                }
                totalVotes
                meanRating
              }
            }
        - name: Get Reviews by bookId
          query: |
            query {
              reviewsByBookId(bookId: 1) {
                reviews {
                  reviewId
                  comment
                  bookId
                  userId
                  rating
                  createdAt
                  updatedAt
                }
                totalVotes
                meanRating
              }
            }
        - name: Get Reviews by bookId
          query: |
            query {
              reviewsByUserId(userId: 1) {
                reviewId
                comment
                bookId
                userId
                rating
                createdAt
                updatedAt
              }
            }
        - name: Get Review by ID
          query: |
            query {
              review(reviewId: "db810235-c349-49a9-98b1-ad8ba31ff97f") {
                reviewId
                comment
                bookId
                userId
                rating
                createdAt
              }
            }
      mutations:
        - name: Create Review
          mutation: |
            mutation { createReview(createReviewInput:{ 
                        comment: "This is a great book!",
                        bookId: 1,   
                        rating: 3
                      }){
                        comment
                        rating
                        createdAt
                        bookId
                        reviewId
                        meanRating
                        totalVotes
                        }
            }
        - name: Update Review by ID
          mutation: |
            mutation {
              updateReview(reviewId: "cb376a47-f1f3-4234-b1e8-1be04185a41d", updateReviewInput: {
              comment: "Updated comment",
              rating: 1
              }) {
              reviewId
              comment
              bookId
              userId
              rating
              createdAt
              updatedAt
              }
            }
        - name: Delete Review By Id
          mutation: |
            mutation {
              removeReview(reviewId: "f6293e05-9d8e-40c0-9efa-fc627a8c29ce")
            }
    - name: User Activity Endpoints
      description: Queries and mutations related to user activities
      queries:
        - name: Get All User Activities by Time And Timestamp
          query: |
            query{
              getActivityByType(timestamp:"2024-06-02T09:05:36Z", activityType:"USER_SIGNIN") {
                userId
                activityId
                activityType
                timestamp 
              }
            }
        - name: Get User Activities by User Id
          query: |
            query {
              getActivityLogs(userId: 1) {
                userId
                activityId
                activityType
                timestamp
              }
            }
      mutations:
        - name: Delete User Activity By Timestamp And Activity Type
          mutation: |
            mutation {
              removeActivitiesByTimestampAndType(timestamp: "2024-06-02T09:05:36Z", activityType: "USER_CREATED")
            }{
              message
            }

introspection:
  removeTrailingPeriodFromDescriptions: false
  schemaFile: ./src/schema.gql
  queryNameStrategy: capitalizeFirst
  fieldExpansionDepth: 2

  spectaqlDirective:
    enable: true

extensions:
  graphqlScalarExamples: true


info:
  title: GraphQL API Book CMS Reference
  description: Welcome to the party!
  termsOfService: https://www.example.com/terms
  contact:
    name: API Support
    email: yurstan@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-introItems:
    - title: Important thing 1
      description: Some important stuff we wanted you to know. Supports `markdown`

servers:
  - url: http://localhost:3000/graphql
    description: Staging
  - url: http://localhost:3000/graphql
    description: Production
    production: true
    headers:
      - name: Authorization
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW4iLCJzdWIiOjEsImlhdCI6MTcxNzk5NzkxNywiZXhwIjoxNzE4MDg0MzE3fQ.j9W9e3eCh2-etItNQdqXK7bqfMwC7h-aJPOkFXooEf0
        comment: Your foo from bar
    # Example queries and mutations to include in the documentation

hooks:
  preBuild: echo "Preparing to build documentation..."
  postBuild: echo "Documentation build complete."
